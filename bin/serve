#!/usr/bin/env node

var resolve = require('path').resolve
  , connect = require('connect')
  , http = require('http')
  , options = {}
  , redis = require('redis')
  , SocketServer = require('ws').Server
  , Ticker = require('./ticker')
  , fs = require('fs');

var server = connect()
  , path = resolve('./public')
  , client = redis.createClient(process.env['REDIS_URL'])
  , port = process.env['PORT'] || 3000;

server.use(connect.logger('dev'))
      .use(function(req, res, next) { req.method = 'GET'; next(); })
      .use(connect.compress())
      .use(connect.static(path, { redirect: false }))

if (process.env['NODE_ENV'] && process.env['NODE_ENV'] == 'development') {
  options = {
    key: fs.readFileSync(resolve('certs/server.key')),
    cert: fs.readFileSync(resolve('certs/server.crt')),
    ca: fs.readFileSync(resolve('certs/server.csr'))
  }
  http = require('https');
}

server = http.createServer(options, server);

server.listen(port, function() {
  console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, port);
});

var socket = new SocketServer({ server: server });
socket.on('connection', function(conn) {
  console.log('\033[90mwebsocket connection opened for business\033[0m');

  conn.connect = function(id) {
    this.ticker = new Ticker(client, id);
    this.ticker.on('change', function(time) {
      conn.send(String(this.ticker.getTime()));
    }.bind(this));
    this.ticker.start();
  }

  conn.setType = function(type) {
    this.ticker.currentType = type;
  }

  conn.toggle = function() {
    this.ticker.paused = !this.ticker.paused;
  }

  conn.on('message', function(message) {
    message = JSON.parse(message);
    if (typeof(conn[message.action]) == 'function') {
      conn[message.action].apply(conn, message.args);
    }
  });

  conn.on('close', function() {
    if (conn.ticker) conn.ticker.save();
  });
});
